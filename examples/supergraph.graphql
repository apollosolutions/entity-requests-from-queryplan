schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.4", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/tag/v0.3")
{
  query: Query
  mutation: Mutation
}

directive @join__directive(graphs: [join__Graph!], name: String!, args: join__DirectiveArguments) repeatable on SCHEMA | OBJECT | INTERFACE | FIELD_DEFINITION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean, overrideLabel: String) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

directive @tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION | SCHEMA

"""An user's saved cart session. Only one cart can be active at a time"""
type Cart
  @join__type(graph: CHECKOUT, key: "userId")
{
  """Each user can only have one cart so the ID is the same as the user ID"""
  userId: ID!

  """Items saved in the cart session"""
  items: [Variant]

  """
  The current total of all the items in the cart, before taxes and shipping
  """
  subtotal: Float @join__field(graph: CHECKOUT, requires: "items { price }")
}

type CartMutations
  @join__type(graph: CHECKOUT)
{
  checkout(paymentMethodId: ID!): CheckoutResult
  addVariantToCart(variantId: ID!, quantity: Int = 1): ResultWithMessage
  removeVariantFromCart(variantId: ID!, quantity: Int = 1): ResultWithMessage
}

type CheckoutResult
  @join__type(graph: CHECKOUT)
{
  successful: Boolean
  orderID: ID
}

"""Inventory details about a specific Variant"""
type Inventory
  @join__type(graph: INVENTORY)
{
  """Returns true if the inventory count is greater than 0"""
  inStock: Boolean!

  """The raw count of not purchased items in the warehouse"""
  inventory: Int
}

scalar join__DirectiveArguments

scalar join__FieldSet

enum join__Graph {
  CHECKOUT @join__graph(name: "checkout", url: "http://localhost:4001/checkout/graphql")
  DISCOVERY @join__graph(name: "discovery", url: "http://localhost:4001/discovery/graphql")
  INVENTORY @join__graph(name: "inventory", url: "http://localhost:4001/inventory/graphql")
  ORDERS @join__graph(name: "orders", url: "http://localhost:4001/orders/graphql")
  PRODUCTS @join__graph(name: "products", url: "http://localhost:4001/products/graphql")
  REVIEWS @join__graph(name: "reviews", url: "http://localhost:4001/reviews/graphql")
  SHIPPING @join__graph(name: "shipping", url: "http://localhost:4001/shipping/graphql")
  USERS @join__graph(name: "users", url: "http://localhost:4001/users/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type LoginFailed
  @join__type(graph: USERS)
{
  reason: String!
}

union LoginResponse
  @join__type(graph: USERS)
  @join__unionMember(graph: USERS, member: "LoginSuccessful")
  @join__unionMember(graph: USERS, member: "LoginFailed")
 = LoginSuccessful | LoginFailed

type LoginSuccessful
  @join__type(graph: USERS)
{
  token: String!
  scopes: [String!]!
  user: User!
}

type Mutation
  @join__type(graph: CHECKOUT)
  @join__type(graph: USERS)
{
  cart: CartMutations @join__field(graph: CHECKOUT)
  login(username: String!, password: String!, scopes: [String!]! = []): LoginResponse @join__field(graph: USERS)
}

"""Returns information about a specific purchase"""
type Order
  @join__type(graph: ORDERS, key: "id")
  @join__type(graph: SHIPPING, key: "id")
  @join__type(graph: USERS, key: "id", resolvable: false)
{
  """
  Each order has a unique id which is separate from the user or items they bought
  """
  id: ID!

  """The user who made the purchase"""
  buyer: User! @join__field(graph: ORDERS) @join__field(graph: SHIPPING, external: true)

  """
  A list of all the items they purchased. This is the Variants, not the Products so we know exactly which
  product and which size/color/feature was bought
  """
  items: [Variant!]! @join__field(graph: ORDERS) @join__field(graph: SHIPPING, external: true)

  """Calculate the cost to ship all the variants to the users address"""
  shippingCost: Float @join__field(graph: SHIPPING, requires: "items { weight } buyer { shippingAddress }")
}

"""A saved payment option for an user"""
type PaymentMethod
  @join__type(graph: USERS)
{
  id: ID!
  name: String
  description: String
  type: PaymentType!
}

"""A fix set of payment types that we accept"""
enum PaymentType
  @join__type(graph: USERS)
{
  CREDIT_CARD @join__enumValue(graph: USERS)
  DEBIT_CARD @join__enumValue(graph: USERS)
  BANK_ACCOUNT @join__enumValue(graph: USERS)
}

"""
A specific product sold by our store. This contains all the high level details but is not the purchasable item.
See Variant for more info.
"""
type Product
  @join__type(graph: DISCOVERY, key: "id")
  @join__type(graph: PRODUCTS, key: "id")
  @join__type(graph: PRODUCTS, key: "upc")
  @join__type(graph: REVIEWS, key: "upc")
  @tag(name: "partner")
{
  id: ID! @join__field(graph: DISCOVERY) @join__field(graph: PRODUCTS) @tag(name: "internal")

  """
  Related products for this product, the user can be fetched from the `x-user-id` header
  """
  recommendedProducts: [Product] @join__field(graph: DISCOVERY)
  upc: ID! @join__field(graph: PRODUCTS) @join__field(graph: REVIEWS)
  title: String @join__field(graph: PRODUCTS)
  description: String @join__field(graph: PRODUCTS)
  mediaUrl: String @join__field(graph: PRODUCTS)

  """Mock random date of when a product might be released"""
  releaseDate: String @join__field(graph: PRODUCTS)

  """Variants of the products to view specific size/color/price options"""
  variants(searchInput: VariantSearchInput = {}): [Variant] @join__field(graph: PRODUCTS)
  reviews: [Review!] @join__field(graph: REVIEWS)
}

"""Search filters for when returning Products"""
input ProductSearchInput
  @join__type(graph: PRODUCTS)
{
  titleStartsWith: String
}

type Query
  @join__type(graph: CHECKOUT)
  @join__type(graph: DISCOVERY)
  @join__type(graph: INVENTORY)
  @join__type(graph: ORDERS)
  @join__type(graph: PRODUCTS)
  @join__type(graph: REVIEWS)
  @join__type(graph: SHIPPING)
  @join__type(graph: USERS)
{
  """
  Get a specific order by id. Meant to be used for a detailed view of an order
  """
  order(id: ID!): Order @join__field(graph: ORDERS)

  """
  Get all available products to shop for. Optionally provide some search filters
  """
  searchProducts(searchInput: ProductSearchInput! = {}): [Product] @join__field(graph: PRODUCTS)

  """
  Get all available variants of products to shop for. Optionally provide some search filters
  """
  searchVariants(searchInput: VariantSearchInput! = {}): [Variant] @join__field(graph: PRODUCTS)

  """
  Get a specific product by id. Useful for the product details page or checkout page
  """
  product(id: ID!): Product @join__field(graph: PRODUCTS)

  """
  Get a specific variant by id. Useful for the product details page or checkout page
  """
  variant(id: ID!): Variant @join__field(graph: PRODUCTS)

  """
  Get the current user from our fake "auth" headers
  Set the "x-user-id" header to the user id.
  """
  user: User @join__field(graph: USERS)
}

type ResultWithMessage
  @join__type(graph: CHECKOUT)
{
  successful: Boolean
  message: String
}

"""A review of a given product by a specific user"""
type Review
  @join__type(graph: REVIEWS, key: "id")
{
  id: ID!

  """The plain text version of the review"""
  body: String

  """The person who authored the review"""
  author: String @deprecated(reason: "Use the new `user` field")

  """The User who submitted the review"""
  user: User

  """The product which this review is about"""
  product: Product
}

"""An user account in our system"""
type User
  @join__type(graph: CHECKOUT, key: "id")
  @join__type(graph: DISCOVERY, key: "id")
  @join__type(graph: ORDERS, key: "id", resolvable: false)
  @join__type(graph: REVIEWS, key: "id")
  @join__type(graph: SHIPPING, key: "id", resolvable: false)
  @join__type(graph: USERS, key: "id")
{
  id: ID!

  """
  The user's active cart session. Once the cart items have been purchases, they transition to an Order
  """
  cart: Cart @join__field(graph: CHECKOUT)

  """
  Suggest products for this user, optionally pass in a specific product id to compare too
  """
  recommendedProducts(productId: ID = null): [Product] @join__field(graph: DISCOVERY)

  """Total saved loyalty points and rewards"""
  loyaltyPoints: Int @join__field(graph: REVIEWS, external: true) @join__field(graph: USERS)
  reviewKarma: Int @join__field(graph: REVIEWS, requires: "loyaltyPoints")

  """The users current saved shipping address"""
  shippingAddress: String @join__field(graph: SHIPPING, external: true) @join__field(graph: USERS)

  """The users login username"""
  username: String! @join__field(graph: USERS)

  """Get the list of last session id of user activity"""
  previousSessions: [ID!] @join__field(graph: USERS)

  """Saved payment methods that can be used to submit orders"""
  paymentMethods: [PaymentMethod] @join__field(graph: USERS)

  """The users previous purchases"""
  orders: [Order] @join__field(graph: USERS)
}

"""
A variant of a product which is a unique combination of attributes like size and color
Variants are the entities that are added to carts and purchased
"""
type Variant
  @join__type(graph: CHECKOUT, key: "id")
  @join__type(graph: INVENTORY, key: "id")
  @join__type(graph: ORDERS, key: "id", resolvable: false)
  @join__type(graph: PRODUCTS, key: "id")
  @join__type(graph: SHIPPING, key: "id", resolvable: false)
{
  id: ID!

  """Price in decimals for this variant"""
  price: Float! @join__field(graph: CHECKOUT, external: true) @join__field(graph: PRODUCTS)

  """Checks the warehouse API for inventory information."""
  inventory: Inventory @join__field(graph: INVENTORY)

  """Link back to the parent Product"""
  product: Product @join__field(graph: PRODUCTS)

  """Optional color option for this variant"""
  colorway: String @join__field(graph: PRODUCTS)

  """Optional size option for this variant"""
  size: String @join__field(graph: PRODUCTS)

  """
  Optional dimensions. Can be use to calculate other info like shipping or packaging
  """
  dimensions: String @join__field(graph: PRODUCTS)

  """
  Optional weight. Can be use to calculate other info like shipping or packaging
  """
  weight: Float @join__field(graph: PRODUCTS) @join__field(graph: SHIPPING, external: true)
}

"""Search filters for when returning Variants"""
input VariantSearchInput
  @join__type(graph: PRODUCTS)
{
  sizeStartsWith: String
}